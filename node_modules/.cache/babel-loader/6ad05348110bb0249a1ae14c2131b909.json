{"ast":null,"code":"import _toConsumableArray from\"/home/muthoni/ecommerce/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/home/muthoni/ecommerce/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/muthoni/ecommerce/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/muthoni/ecommerce/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/muthoni/ecommerce/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/muthoni/ecommerce/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/muthoni/ecommerce/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import Product from\"./Product\";var ShoppingCart=/*#__PURE__*/function(_Component){_inherits(ShoppingCart,_Component);var _super=_createSuper(ShoppingCart);//Executes when the component is mounted\nfunction ShoppingCart(props){var _this;_classCallCheck(this,ShoppingCart);//console.log(\"constructor - ShoppingCart\");\n_this=_super.call(this,props);//calling super class's constructor\n//initialization of the state\n_this.componentDidMount=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,prods;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"http://192.168.0.129:5000/products\",{method:\"GET\"});case 2:response=_context.sent;_context.next=5;return response.json();case 5:prods=_context.sent;//the following code executes after converting response body into JS object array\nconsole.log(prods);//updating products into component's state\n_this.setState({products:prods});//console.log(\"componentDidMount - ShoppingCart\");\ncase 8:case\"end\":return _context.stop();}}},_callee);}));_this.handleIncrement=function(product,maxValue){//get index of selected product\nvar allProducts=_toConsumableArray(_this.state.products);var index=allProducts.indexOf(product);if(allProducts[index].quantity<maxValue){allProducts[index].quantity++;//update the state of current component (parent component)\n_this.setState({products:allProducts});}};_this.handleDecrement=function(product,minValue){//get index of selected product\nvar allProducts=_toConsumableArray(_this.state.products);var index=allProducts.indexOf(product);if(allProducts[index].quantity>minValue){allProducts[index].quantity--;//update the state of current component (parent component)\n_this.setState({products:allProducts});}};_this.handleDelete=function(product){//get index of selected product\nvar allProducts=_toConsumableArray(_this.state.products);var index=allProducts.indexOf(product);if(window.confirm(\"Are you sure to delete?\")){//delete product based on index\nallProducts.splice(index,1);//update the state of current component (parent component)\n_this.setState({products:allProducts});}};_this.state={products:[]};return _this;}_createClass(ShoppingCart,[{key:\"render\",value:function render(){var _this2=this;//console.log(\"render - ShoppingCart\");\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h4\",null,\"Shopping Cart\"),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},this.state.products.map(function(prod){return/*#__PURE__*/React.createElement(Product,{key:prod.id,product:prod,onIncrement:_this2.handleIncrement,onDecrement:_this2.handleDecrement,onDelete:_this2.handleDelete},/*#__PURE__*/React.createElement(\"button\",{className:\"btn btn-primary\"},\"Buy Now\"));})));}// render ends here\n//Executes after constructor and render method (includes life cycle of child components, if any) of current component\n},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){/*console.log(\n      \"componentDidUpdate - ShoppingCart\",\n      prevProps,\n      prevState,\n      this.props,\n      this.state\n    );*/ // if (prevProps.x != this.props.x) {\n//   //make http call\n// }\n}//Executes when the current instance of current component is being deleted from memory\n},{key:\"componentWillUnmount\",value:function componentWillUnmount(){//console.log(\"componentWillUnmount - ShoppingCart\");\n}},{key:\"componentDidCatch\",value:function componentDidCatch(error,info){//console.log(\"componentDidCatch - ShoppingCart\");\n//console.log(error, info);\nlocalStorage.lastError=\"\".concat(error,\"\\n\").concat(JSON.stringify(info));}//executes when the user clicks on + button.\n}]);return ShoppingCart;}(Component);export{ShoppingCart as default};","map":{"version":3,"sources":["/home/muthoni/ecommerce/src/ShoppingCart.jsx"],"names":["React","Component","Product","ShoppingCart","props","componentDidMount","fetch","method","response","json","prods","console","log","setState","products","handleIncrement","product","maxValue","allProducts","state","index","indexOf","quantity","handleDecrement","minValue","handleDelete","window","confirm","splice","map","prod","id","prevProps","prevState","error","info","localStorage","lastError","JSON","stringify"],"mappings":"u9BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,C,GAEqBC,CAAAA,Y,4GACnB;AACA,sBAAYC,KAAZ,CAAmB,8CACjB;AACA,uBAAMA,KAAN,EAAc;AAEd;AAJiB,MAsCnBC,iBAtCmB,sEAsCC,4KAEGC,CAAAA,KAAK,CAAC,oCAAD,CAAuC,CAC/DC,MAAM,CAAE,KADuD,CAAvC,CAFR,QAEdC,QAFc,qCAQAA,CAAAA,QAAQ,CAACC,IAAT,EARA,QAQdC,KARc,eAUlB;AACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAEA;AACA,MAAKG,QAAL,CAAc,CAAEC,QAAQ,CAAEJ,KAAZ,CAAd,EAEA;AAhBkB,sDAtCD,SAmFnBK,eAnFmB,CAmFD,SAACC,OAAD,CAAUC,QAAV,CAAuB,CACvC;AACA,GAAIC,CAAAA,WAAW,oBAAO,MAAKC,KAAL,CAAWL,QAAlB,CAAf,CACA,GAAIM,CAAAA,KAAK,CAAGF,WAAW,CAACG,OAAZ,CAAoBL,OAApB,CAAZ,CAEA,GAAIE,WAAW,CAACE,KAAD,CAAX,CAAmBE,QAAnB,CAA8BL,QAAlC,CAA4C,CAC1CC,WAAW,CAACE,KAAD,CAAX,CAAmBE,QAAnB,GAEA;AACA,MAAKT,QAAL,CAAc,CAAEC,QAAQ,CAAEI,WAAZ,CAAd,EACD,CACF,CA9FkB,OAiGnBK,eAjGmB,CAiGD,SAACP,OAAD,CAAUQ,QAAV,CAAuB,CACvC;AACA,GAAIN,CAAAA,WAAW,oBAAO,MAAKC,KAAL,CAAWL,QAAlB,CAAf,CACA,GAAIM,CAAAA,KAAK,CAAGF,WAAW,CAACG,OAAZ,CAAoBL,OAApB,CAAZ,CAEA,GAAIE,WAAW,CAACE,KAAD,CAAX,CAAmBE,QAAnB,CAA8BE,QAAlC,CAA4C,CAC1CN,WAAW,CAACE,KAAD,CAAX,CAAmBE,QAAnB,GAEA;AACA,MAAKT,QAAL,CAAc,CAAEC,QAAQ,CAAEI,WAAZ,CAAd,EACD,CACF,CA5GkB,OA+GnBO,YA/GmB,CA+GJ,SAACT,OAAD,CAAa,CAC1B;AACA,GAAIE,CAAAA,WAAW,oBAAO,MAAKC,KAAL,CAAWL,QAAlB,CAAf,CACA,GAAIM,CAAAA,KAAK,CAAGF,WAAW,CAACG,OAAZ,CAAoBL,OAApB,CAAZ,CAEA,GAAIU,MAAM,CAACC,OAAP,CAAe,yBAAf,CAAJ,CAA+C,CAC7C;AACAT,WAAW,CAACU,MAAZ,CAAmBR,KAAnB,CAA0B,CAA1B,EAEA;AACA,MAAKP,QAAL,CAAc,CAAEC,QAAQ,CAAEI,WAAZ,CAAd,EACD,CACF,CA3HkB,CAKjB,MAAKC,KAAL,CAAa,CACXL,QAAQ,CAAE,EADC,CAAb,CALiB,aAQlB,C,gEAEQ,iBACP;AAEA,mBACE,4CACE,8CADF,cAGE,2BAAK,SAAS,CAAC,KAAf,EACG,KAAKK,KAAL,CAAWL,QAAX,CAAoBe,GAApB,CAAwB,SAACC,IAAD,CAAU,CACjC,mBACE,oBAAC,OAAD,EACE,GAAG,CAAEA,IAAI,CAACC,EADZ,CAEE,OAAO,CAAED,IAFX,CAGE,WAAW,CAAE,MAAI,CAACf,eAHpB,CAIE,WAAW,CAAE,MAAI,CAACQ,eAJpB,CAKE,QAAQ,CAAE,MAAI,CAACE,YALjB,eAOE,8BAAQ,SAAS,CAAC,iBAAlB,YAPF,CADF,CAWD,CAZA,CADH,CAHF,CADF,CAqBD,CACD;AAEA;8DAoBmBO,S,CAAWC,S,CAAW,CACvC;AACJ;AACA;AACA;AACA;AACA;AACA,QAP2C,CAQvC;AACA;AACA;AACD,CAED;mEACuB,CACrB;AACD,C,4DAEiBC,K,CAAOC,I,CAAM,CAC7B;AACA;AAEAC,YAAY,CAACC,SAAb,WAA4BH,KAA5B,cAAsCI,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAtC,EACD,CAED;0BApFwClC,S,SAArBE,Y","sourcesContent":["import React, { Component } from \"react\";\nimport Product from \"./Product\";\n\nexport default class ShoppingCart extends Component {\n  //Executes when the component is mounted\n  constructor(props) {\n    //console.log(\"constructor - ShoppingCart\");\n    super(props); //calling super class's constructor\n\n    //initialization of the state\n    this.state = {\n      products: [],\n    };\n  }\n\n  render() {\n    //console.log(\"render - ShoppingCart\");\n\n    return (\n      <div>\n        <h4>Shopping Cart</h4>\n\n        <div className=\"row\">\n          {this.state.products.map((prod) => {\n            return (\n              <Product\n                key={prod.id}\n                product={prod}\n                onIncrement={this.handleIncrement}\n                onDecrement={this.handleDecrement}\n                onDelete={this.handleDelete}\n              >\n                <button className=\"btn btn-primary\">Buy Now</button>\n              </Product>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n  // render ends here\n\n  //Executes after constructor and render method (includes life cycle of child components, if any) of current component\n  componentDidMount = async () => {\n    //send request to server\n    var response = await fetch(\"http://192.168.0.129:5000/products\", {\n      method: \"GET\",\n    });\n\n    //the following code executes after receiving response from server\n    //converting the response body into a JS object array\n    var prods = await response.json();\n\n    //the following code executes after converting response body into JS object array\n    console.log(prods);\n\n    //updating products into component's state\n    this.setState({ products: prods });\n\n    //console.log(\"componentDidMount - ShoppingCart\");\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    /*console.log(\n      \"componentDidUpdate - ShoppingCart\",\n      prevProps,\n      prevState,\n      this.props,\n      this.state\n    );*/\n    // if (prevProps.x != this.props.x) {\n    //   //make http call\n    // }\n  }\n\n  //Executes when the current instance of current component is being deleted from memory\n  componentWillUnmount() {\n    //console.log(\"componentWillUnmount - ShoppingCart\");\n  }\n\n  componentDidCatch(error, info) {\n    //console.log(\"componentDidCatch - ShoppingCart\");\n    //console.log(error, info);\n\n    localStorage.lastError = `${error}\\n${JSON.stringify(info)}`;\n  }\n\n  //executes when the user clicks on + button.\n  handleIncrement = (product, maxValue) => {\n    //get index of selected product\n    let allProducts = [...this.state.products];\n    let index = allProducts.indexOf(product);\n\n    if (allProducts[index].quantity < maxValue) {\n      allProducts[index].quantity++;\n\n      //update the state of current component (parent component)\n      this.setState({ products: allProducts });\n    }\n  };\n\n  //executes when the user clicks on - button.\n  handleDecrement = (product, minValue) => {\n    //get index of selected product\n    let allProducts = [...this.state.products];\n    let index = allProducts.indexOf(product);\n\n    if (allProducts[index].quantity > minValue) {\n      allProducts[index].quantity--;\n\n      //update the state of current component (parent component)\n      this.setState({ products: allProducts });\n    }\n  };\n\n  //executes when the user clicks on Delete (X) button in the Product component.\n  handleDelete = (product) => {\n    //get index of selected product\n    let allProducts = [...this.state.products];\n    let index = allProducts.indexOf(product);\n\n    if (window.confirm(\"Are you sure to delete?\")) {\n      //delete product based on index\n      allProducts.splice(index, 1);\n\n      //update the state of current component (parent component)\n      this.setState({ products: allProducts });\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}